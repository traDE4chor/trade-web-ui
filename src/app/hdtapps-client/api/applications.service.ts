/**
 * HDTApps Framework
 * Handling data transformation applications (HDTApps) framework's API specification 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AppArchive } from '../model/appArchive';
import { Application } from '../model/application';
import { Transformation } from '../model/transformation';

import { HDT_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { HdtAppsConfiguration }                                     from '../configuration';


@Injectable()
export class ApplicationsService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new HdtAppsConfiguration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(HDT_BASE_PATH) basePath: string, @Optional() configuration: HdtAppsConfiguration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Deletes an application
     * 
     * @param appID App id to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hdtappsApiDeleteApp(appID: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public hdtappsApiDeleteApp(appID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public hdtappsApiDeleteApp(appID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public hdtappsApiDeleteApp(appID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (appID === null || appID === undefined) {
            throw new Error('Required parameter appID was null or undefined when calling hdtappsApiDeleteApp.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/apps/${encodeURIComponent(String(appID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve the list of applications
     * Multiple status values can be provided with comma separated strings
     * @param tags Tags to filter by
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hdtappsApiFindApps(tags?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<Application>>;
    public hdtappsApiFindApps(tags?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Application>>>;
    public hdtappsApiFindApps(tags?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Application>>>;
    public hdtappsApiFindApps(tags?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tags) {
            tags.forEach((element) => {
                queryParameters = queryParameters.append('tags[]', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Application>>(`${this.basePath}/apps`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find application by ID
     * Returns a single application
     * @param appID ID of the application to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hdtappsApiGetAppById(appID: string, observe?: 'body', reportProgress?: boolean): Observable<Application>;
    public hdtappsApiGetAppById(appID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Application>>;
    public hdtappsApiGetAppById(appID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Application>>;
    public hdtappsApiGetAppById(appID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (appID === null || appID === undefined) {
            throw new Error('Required parameter appID was null or undefined when calling hdtappsApiGetAppById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Application>(`${this.basePath}/apps/${encodeURIComponent(String(appID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get transformations supported by application
     * Returns a list of transformations
     * @param appID ID of the application
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hdtappsApiGetTransfsByAppId(appID: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Transformation>>;
    public hdtappsApiGetTransfsByAppId(appID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Transformation>>>;
    public hdtappsApiGetTransfsByAppId(appID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Transformation>>>;
    public hdtappsApiGetTransfsByAppId(appID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (appID === null || appID === undefined) {
            throw new Error('Required parameter appID was null or undefined when calling hdtappsApiGetTransfsByAppId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Transformation>>(`${this.basePath}/apps/${encodeURIComponent(String(appID))}/transformations`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Publish a new data transformation application to the repository
     * Publish an application
     * @param body Application object that needs to be published to the repository
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hdtappsApiPublishApp(body: AppArchive, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public hdtappsApiPublishApp(body: AppArchive, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public hdtappsApiPublishApp(body: AppArchive, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public hdtappsApiPublishApp(body: AppArchive, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling hdtappsApiPublishApp.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/apps`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing application
     * 
     * @param appID App id to update
     * @param body App object that needs to be updated
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hdtappsApiUpdateApp(appID: string, body: AppArchive, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public hdtappsApiUpdateApp(appID: string, body: AppArchive, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public hdtappsApiUpdateApp(appID: string, body: AppArchive, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public hdtappsApiUpdateApp(appID: string, body: AppArchive, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (appID === null || appID === undefined) {
            throw new Error('Required parameter appID was null or undefined when calling hdtappsApiUpdateApp.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling hdtappsApiUpdateApp.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/apps/${encodeURIComponent(String(appID))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
