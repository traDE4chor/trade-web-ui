/**
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DataValueApi {

    protected basePath = 'https://localhost/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Creates and adds a new data value to the TraDE middleware
     * @param dataValueData The name, type and who created the data value are required. The specification of a contentType is only required if the data type is binary.
     */
    public addDataValue(dataValueData: models.DataValueData, extraHttpRequestParams?: any): Observable<models.DataValue> {
        return this.addDataValueWithHttpInfo(dataValueData, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Deletes a data value and its associated data from the TraDE middleware. All references from data element instances are invalidated accordingly.
     * @summary Deletes a data value
     * @param dataValueId Id of the data value that needs to be fetched
     */
    public deleteDataValue(dataValueId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteDataValueWithHttpInfo(dataValueId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Get the data value associated to the data element instance.
     * @param instanceId Id of the data element instance that needs to be fetched
     */
    public getDataValue(instanceId: string, extraHttpRequestParams?: any): Observable<models.DataValueWithLinks> {
        return this.getDataValueWithHttpInfo(instanceId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Find a data value by Id
     * @param dataValueId Id of the data value that needs to be fetched
     */
    public getDataValueDirectly(dataValueId: string, extraHttpRequestParams?: any): Observable<models.DataValueWithLinks> {
        return this.getDataValueDirectlyWithHttpInfo(dataValueId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets all available `DataValue` resources. Optional query parameter of **start** and **size** enable pagination of the collection of data value resources, param **createdBy** filters result list by the creator and param **status** filters result list by status of the data values.
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param status Status of data values to return
     * @param createdBy Name of the data element to which instance a data value belongs
     */
    public getDataValuesDirectly(start?: number, size?: number, status?: string, createdBy?: string, extraHttpRequestParams?: any): Observable<models.DataValueArrayWithLinks> {
        return this.getDataValuesDirectlyWithHttpInfo(start, size, status, createdBy, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Pulls data from the data value identified by Id
     * @param dataValueId Id of the data value that needs to be fetched
     */
    public pullDataValue(dataValueId: string, extraHttpRequestParams?: any): Observable<string> {
        return this.pullDataValueWithHttpInfo(dataValueId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Pushes data to the TraDE middleware by attaching it to the data value identified by Id
     * @param dataValueId Id of the data value to attach data to
     * @param contentLength The size of the data passed as header
     * @param data The data to push.
     */
    public pushDataValue(dataValueId: string, contentLength: number, data: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.pushDataValueWithHttpInfo(dataValueId, contentLength, data, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Creates a new or associates an existing dataValue to the data element instance.
     * @param instanceId Id of the data element instance that needs to be fetched
     * @param dataValueData DataValue object that needs to be created or associated. In case of updating the associated data value providing the Id is enough. To create and associate a new DataValue, a name, type and who created the data value are required. The specification of a contentType is only required if the data type of the data value is binary.
     */
    public setDataValue(instanceId: string, dataValueData?: models.DataValue, extraHttpRequestParams?: any): Observable<models.DataValueWithLinks> {
        return this.setDataValueWithHttpInfo(instanceId, dataValueData, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Update an existing data value
     * @param dataValueId Id of the data value that needs to be fetched
     * @param dataValue The updated data value resource. Only changes to the following fields are reflected **name**, **type** and **contentType**. All other changes are ignored since the corresponding fields of the resource are internally set by the server or are immutable.
     */
    public updateDataValueDirectly(dataValueId: string, dataValue: models.DataValue, extraHttpRequestParams?: any): Observable<models.DataValueWithLinks> {
        return this.updateDataValueDirectlyWithHttpInfo(dataValueId, dataValue, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Creates and adds a new data value to the TraDE middleware
     * 
     * @param dataValueData The name, type and who created the data value are required. The specification of a contentType is only required if the data type is binary.
     */
    public addDataValueWithHttpInfo(dataValueData: models.DataValueData, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataValues';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataValueData' is not null or undefined
        if (dataValueData === null || dataValueData === undefined) {
            throw new Error('Required parameter dataValueData was null or undefined when calling addDataValue.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: dataValueData == null ? '' : JSON.stringify(dataValueData), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Deletes a data value
     * Deletes a data value and its associated data from the TraDE middleware. All references from data element instances are invalidated accordingly.
     * @param dataValueId Id of the data value that needs to be fetched
     */
    public deleteDataValueWithHttpInfo(dataValueId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataValues/${dataValueId}'
                    .replace('${' + 'dataValueId' + '}', String(dataValueId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataValueId' is not null or undefined
        if (dataValueId === null || dataValueId === undefined) {
            throw new Error('Required parameter dataValueId was null or undefined when calling deleteDataValue.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get the data value associated to the data element instance.
     * 
     * @param instanceId Id of the data element instance that needs to be fetched
     */
    public getDataValueWithHttpInfo(instanceId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataElementInstances/${instanceId}/dataValue'
                    .replace('${' + 'instanceId' + '}', String(instanceId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'instanceId' is not null or undefined
        if (instanceId === null || instanceId === undefined) {
            throw new Error('Required parameter instanceId was null or undefined when calling getDataValue.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find a data value by Id
     * 
     * @param dataValueId Id of the data value that needs to be fetched
     */
    public getDataValueDirectlyWithHttpInfo(dataValueId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataValues/${dataValueId}'
                    .replace('${' + 'dataValueId' + '}', String(dataValueId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataValueId' is not null or undefined
        if (dataValueId === null || dataValueId === undefined) {
            throw new Error('Required parameter dataValueId was null or undefined when calling getDataValueDirectly.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets all available &#x60;DataValue&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data value resources, param **createdBy** filters result list by the creator and param **status** filters result list by status of the data values.
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param status Status of data values to return
     * @param createdBy Name of the data element to which instance a data value belongs
     */
    public getDataValuesDirectlyWithHttpInfo(start?: number, size?: number, status?: string, createdBy?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataValues';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (status !== undefined) {
            queryParameters.set('status', <any>status);
        }

        if (createdBy !== undefined) {
            queryParameters.set('createdBy', <any>createdBy);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Pulls data from the data value identified by Id
     * 
     * @param dataValueId Id of the data value that needs to be fetched
     */
    public pullDataValueWithHttpInfo(dataValueId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataValues/${dataValueId}/data'
                    .replace('${' + 'dataValueId' + '}', String(dataValueId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataValueId' is not null or undefined
        if (dataValueId === null || dataValueId === undefined) {
            throw new Error('Required parameter dataValueId was null or undefined when calling pullDataValue.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/octet-stream'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Pushes data to the TraDE middleware by attaching it to the data value identified by Id
     * 
     * @param dataValueId Id of the data value to attach data to
     * @param contentLength The size of the data passed as header
     * @param data The data to push.
     */
    public pushDataValueWithHttpInfo(dataValueId: string, contentLength: number, data: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataValues/${dataValueId}/data'
                    .replace('${' + 'dataValueId' + '}', String(dataValueId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataValueId' is not null or undefined
        if (dataValueId === null || dataValueId === undefined) {
            throw new Error('Required parameter dataValueId was null or undefined when calling pushDataValue.');
        }
        // verify required parameter 'contentLength' is not null or undefined
        if (contentLength === null || contentLength === undefined) {
            throw new Error('Required parameter contentLength was null or undefined when calling pushDataValue.');
        }
        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling pushDataValue.');
        }
        if (contentLength !== undefined && contentLength !== null) {
            headers.set('Content-Length', String(contentLength));
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/octet-stream'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Creates a new or associates an existing dataValue to the data element instance.
     * 
     * @param instanceId Id of the data element instance that needs to be fetched
     * @param dataValueData DataValue object that needs to be created or associated. In case of updating the associated data value providing the Id is enough. To create and associate a new DataValue, a name, type and who created the data value are required. The specification of a contentType is only required if the data type of the data value is binary.
     */
    public setDataValueWithHttpInfo(instanceId: string, dataValueData?: models.DataValue, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataElementInstances/${instanceId}/dataValue'
                    .replace('${' + 'instanceId' + '}', String(instanceId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'instanceId' is not null or undefined
        if (instanceId === null || instanceId === undefined) {
            throw new Error('Required parameter instanceId was null or undefined when calling setDataValue.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: dataValueData == null ? '' : JSON.stringify(dataValueData), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update an existing data value
     * 
     * @param dataValueId Id of the data value that needs to be fetched
     * @param dataValue The updated data value resource. Only changes to the following fields are reflected **name**, **type** and **contentType**. All other changes are ignored since the corresponding fields of the resource are internally set by the server or are immutable.
     */
    public updateDataValueDirectlyWithHttpInfo(dataValueId: string, dataValue: models.DataValue, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataValues/${dataValueId}'
                    .replace('${' + 'dataValueId' + '}', String(dataValueId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataValueId' is not null or undefined
        if (dataValueId === null || dataValueId === undefined) {
            throw new Error('Required parameter dataValueId was null or undefined when calling updateDataValueDirectly.');
        }
        // verify required parameter 'dataValue' is not null or undefined
        if (dataValue === null || dataValue === undefined) {
            throw new Error('Required parameter dataValue was null or undefined when calling updateDataValueDirectly.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: dataValue == null ? '' : JSON.stringify(dataValue), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
