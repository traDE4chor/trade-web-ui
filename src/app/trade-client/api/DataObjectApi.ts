/**
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DataObjectApi {

    protected basePath = 'https://localhost/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Creates and adds a new data object to the TraDE middleware
     * @param dataObjectData The name and creating entity of the data object that will be created.
     */
    public addDataObject(dataObjectData: models.DataObjectData, extraHttpRequestParams?: any): Observable<models.DataObject> {
        return this.addDataObjectWithHttpInfo(dataObjectData, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Deletes a complete data object and its referenced data elements as well as all instances of conntected to both the data object and its data elements from the TraDE middleware
     * @summary Deletes a dataObject. If the dataObject belongs to a dataModel the delete request will be rejected, since data models are immutable resources.
     * @param dataObjectId Id of the data object that needs to be fetched
     */
    public deleteDataObject(dataObjectId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteDataObjectWithHttpInfo(dataObjectId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets all available `DataObject` resources. Optional query parameter of **start** and **size** enable pagination of the collection of data object resources, params **name** and **entity** filter result list by name and entity and param **status** filters result list by status of the data objects.
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param name Name of data objects to return
     * @param entity Creating entity of data dependency graph to return
     * @param status Status of data objects to return
     */
    public getAllDataObjects(start?: number, size?: number, name?: string, entity?: string, status?: string, extraHttpRequestParams?: any): Observable<models.DataObjectArrayWithLinks> {
        return this.getAllDataObjectsWithHttpInfo(start, size, name, entity, status, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Find a data object by Id
     * @param dataObjectId Id of the data object that needs to be fetched
     */
    public getDataObjectById(dataObjectId: string, extraHttpRequestParams?: any): Observable<models.DataObjectWithLinks> {
        return this.getDataObjectByIdWithHttpInfo(dataObjectId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets all `DataObject` resources which belong the data model. Optional query parameter of **start** and **size** enable pagination of the collection of data object resources.
     * @param dataModelId Id of the data model that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     */
    public getDataObjects(dataModelId: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<models.DataObjectArrayWithLinks> {
        return this.getDataObjectsWithHttpInfo(dataModelId, start, size, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Update an existing dataObject
     * @summary Update an existing dataObject. If the dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
     * @param dataObjectId Id of the data object that needs to be updated
     * @param dataObject The updated data object resource. Only changes to the following fields are reflected **name** and creating **entity**. All other changes are ignored since the corresponding fields of the resource are internally set by the server or are immutable.
     */
    public updateDataObject(dataObjectId: string, dataObject: models.DataObject, extraHttpRequestParams?: any): Observable<models.DataObjectWithLinks> {
        return this.updateDataObjectWithHttpInfo(dataObjectId, dataObject, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Creates and adds a new data object to the TraDE middleware
     * 
     * @param dataObjectData The name and creating entity of the data object that will be created.
     */
    public addDataObjectWithHttpInfo(dataObjectData: models.DataObjectData, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjects';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataObjectData' is not null or undefined
        if (dataObjectData === null || dataObjectData === undefined) {
            throw new Error('Required parameter dataObjectData was null or undefined when calling addDataObject.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: dataObjectData == null ? '' : JSON.stringify(dataObjectData), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Deletes a dataObject. If the dataObject belongs to a dataModel the delete request will be rejected, since data models are immutable resources.
     * Deletes a complete data object and its referenced data elements as well as all instances of conntected to both the data object and its data elements from the TraDE middleware
     * @param dataObjectId Id of the data object that needs to be fetched
     */
    public deleteDataObjectWithHttpInfo(dataObjectId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjects/${dataObjectId}'
                    .replace('${' + 'dataObjectId' + '}', String(dataObjectId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataObjectId' is not null or undefined
        if (dataObjectId === null || dataObjectId === undefined) {
            throw new Error('Required parameter dataObjectId was null or undefined when calling deleteDataObject.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets all available &#x60;DataObject&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data object resources, params **name** and **entity** filter result list by name and entity and param **status** filters result list by status of the data objects.
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param name Name of data objects to return
     * @param entity Creating entity of data dependency graph to return
     * @param status Status of data objects to return
     */
    public getAllDataObjectsWithHttpInfo(start?: number, size?: number, name?: string, entity?: string, status?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjects';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }

        if (entity !== undefined) {
            queryParameters.set('entity', <any>entity);
        }

        if (status !== undefined) {
            queryParameters.set('status', <any>status);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find a data object by Id
     * 
     * @param dataObjectId Id of the data object that needs to be fetched
     */
    public getDataObjectByIdWithHttpInfo(dataObjectId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjects/${dataObjectId}'
                    .replace('${' + 'dataObjectId' + '}', String(dataObjectId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataObjectId' is not null or undefined
        if (dataObjectId === null || dataObjectId === undefined) {
            throw new Error('Required parameter dataObjectId was null or undefined when calling getDataObjectById.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets all &#x60;DataObject&#x60; resources which belong the data model. Optional query parameter of **start** and **size** enable pagination of the collection of data object resources.
     * @param dataModelId Id of the data model that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     */
    public getDataObjectsWithHttpInfo(dataModelId: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataModels/${dataModelId}/dataObjects'
                    .replace('${' + 'dataModelId' + '}', String(dataModelId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataModelId' is not null or undefined
        if (dataModelId === null || dataModelId === undefined) {
            throw new Error('Required parameter dataModelId was null or undefined when calling getDataObjects.');
        }
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update an existing dataObject. If the dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
     * Update an existing dataObject
     * @param dataObjectId Id of the data object that needs to be updated
     * @param dataObject The updated data object resource. Only changes to the following fields are reflected **name** and creating **entity**. All other changes are ignored since the corresponding fields of the resource are internally set by the server or are immutable.
     */
    public updateDataObjectWithHttpInfo(dataObjectId: string, dataObject: models.DataObject, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjects/${dataObjectId}'
                    .replace('${' + 'dataObjectId' + '}', String(dataObjectId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataObjectId' is not null or undefined
        if (dataObjectId === null || dataObjectId === undefined) {
            throw new Error('Required parameter dataObjectId was null or undefined when calling updateDataObject.');
        }
        // verify required parameter 'dataObject' is not null or undefined
        if (dataObject === null || dataObject === undefined) {
            throw new Error('Required parameter dataObject was null or undefined when calling updateDataObject.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: dataObject == null ? '' : JSON.stringify(dataObject), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
