/**
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DataElementInstanceApi {

    protected basePath = 'https://localhost/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Find a data element instance by Id
     * @param instanceId Id of the data element instance that needs to be fetched
     */
    public getDataElementInstance(instanceId: string, extraHttpRequestParams?: any): Observable<models.DataElementInstanceWithLinks> {
        return this.getDataElementInstanceWithHttpInfo(instanceId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Get a data element instance from a data object instance by the name of the corresponding data element
     * @param instanceId Id of the data object instance that needs to be fetched
     * @param dataElementName The name of the data element for which we want to get the instance from the current data object instance
     */
    public getDataElementInstanceByDataElementName(instanceId: string, dataElementName: string, extraHttpRequestParams?: any): Observable<models.DataElementInstanceWithLinks> {
        return this.getDataElementInstanceByDataElementNameWithHttpInfo(instanceId, dataElementName, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets all available `DataElementInstance` resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element instance resources and param **status** filters result list by status of the data element instances.
     * @param instanceId Id of the data object instance that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param status Status of data element instances to return
     */
    public getDataElementInstances(instanceId: string, start?: number, size?: number, status?: string, extraHttpRequestParams?: any): Observable<models.DataElementInstanceArrayWithLinks> {
        return this.getDataElementInstancesWithHttpInfo(instanceId, start, size, status, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets all available `DataElementInstance` resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element instance resources and param **status** filters result list by status of the data element instances.
     * @param dataElementId Id of the data element that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param status Status of data element instances to return
     */
    public getDataElementInstancesOfDataElement(dataElementId: string, start?: number, size?: number, status?: string, extraHttpRequestParams?: any): Observable<models.DataElementInstanceArrayWithLinks> {
        return this.getDataElementInstancesOfDataElementWithHttpInfo(dataElementId, start, size, status, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Provides a list of all data element instances that use/refer to the data value with the given id. Optional query parameter of **start** and **size** enable pagination of the collection of data element instance resources.
     * @param dataValueId Id of the data value that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     */
    public getDataElementInstancesUsingDataValue(dataValueId: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<models.DataElementInstanceArrayWithLinks> {
        return this.getDataElementInstancesUsingDataValueWithHttpInfo(dataValueId, start, size, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Query an available `DataElementInstance` resource based on specified parameters. Query parameters **dataModelName**, **dataObjectName** and **dataElementName** as well as **correlationProperties** transfered as request body are used as a query to find a matching data element instance.
     * @param dataModelNamespace Namespace of the data model a data object instance should belong to.
     * @param dataModelName Name of the data model a data element instance should belong to.
     * @param dataObjectName The name of the data object the instance should belong to.
     * @param dataElementName The name of the data element the instance should belong to.
     * @param correlationProperties An array of correlation properties associated with the searched data element instance.
     */
    public queryDataElementInstance(dataModelNamespace: string, dataModelName: string, dataObjectName: string, dataElementName: string, correlationProperties: models.CorrelationPropertyArray, extraHttpRequestParams?: any): Observable<models.DataElementInstanceWithLinks> {
        return this.queryDataElementInstanceWithHttpInfo(dataModelNamespace, dataModelName, dataObjectName, dataElementName, correlationProperties, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Find a data element instance by Id
     * 
     * @param instanceId Id of the data element instance that needs to be fetched
     */
    public getDataElementInstanceWithHttpInfo(instanceId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataElementInstances/${instanceId}'
                    .replace('${' + 'instanceId' + '}', String(instanceId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'instanceId' is not null or undefined
        if (instanceId === null || instanceId === undefined) {
            throw new Error('Required parameter instanceId was null or undefined when calling getDataElementInstance.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a data element instance from a data object instance by the name of the corresponding data element
     * 
     * @param instanceId Id of the data object instance that needs to be fetched
     * @param dataElementName The name of the data element for which we want to get the instance from the current data object instance
     */
    public getDataElementInstanceByDataElementNameWithHttpInfo(instanceId: string, dataElementName: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjectInstances/${instanceId}/elementInstances/${dataElementName}'
                    .replace('${' + 'instanceId' + '}', String(instanceId))
                    .replace('${' + 'dataElementName' + '}', String(dataElementName));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'instanceId' is not null or undefined
        if (instanceId === null || instanceId === undefined) {
            throw new Error('Required parameter instanceId was null or undefined when calling getDataElementInstanceByDataElementName.');
        }
        // verify required parameter 'dataElementName' is not null or undefined
        if (dataElementName === null || dataElementName === undefined) {
            throw new Error('Required parameter dataElementName was null or undefined when calling getDataElementInstanceByDataElementName.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets all available &#x60;DataElementInstance&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element instance resources and param **status** filters result list by status of the data element instances.
     * @param instanceId Id of the data object instance that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param status Status of data element instances to return
     */
    public getDataElementInstancesWithHttpInfo(instanceId: string, start?: number, size?: number, status?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjectInstances/${instanceId}/elementInstances'
                    .replace('${' + 'instanceId' + '}', String(instanceId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'instanceId' is not null or undefined
        if (instanceId === null || instanceId === undefined) {
            throw new Error('Required parameter instanceId was null or undefined when calling getDataElementInstances.');
        }
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (status !== undefined) {
            queryParameters.set('status', <any>status);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets all available &#x60;DataElementInstance&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element instance resources and param **status** filters result list by status of the data element instances.
     * @param dataElementId Id of the data element that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param status Status of data element instances to return
     */
    public getDataElementInstancesOfDataElementWithHttpInfo(dataElementId: string, start?: number, size?: number, status?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataElements/${dataElementId}/instances'
                    .replace('${' + 'dataElementId' + '}', String(dataElementId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataElementId' is not null or undefined
        if (dataElementId === null || dataElementId === undefined) {
            throw new Error('Required parameter dataElementId was null or undefined when calling getDataElementInstancesOfDataElement.');
        }
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (status !== undefined) {
            queryParameters.set('status', <any>status);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Provides a list of all data element instances that use/refer to the data value with the given id. Optional query parameter of **start** and **size** enable pagination of the collection of data element instance resources.
     * 
     * @param dataValueId Id of the data value that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     */
    public getDataElementInstancesUsingDataValueWithHttpInfo(dataValueId: string, start?: number, size?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataValues/${dataValueId}/elementInstances'
                    .replace('${' + 'dataValueId' + '}', String(dataValueId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataValueId' is not null or undefined
        if (dataValueId === null || dataValueId === undefined) {
            throw new Error('Required parameter dataValueId was null or undefined when calling getDataElementInstancesUsingDataValue.');
        }
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Query an available &#x60;DataElementInstance&#x60; resource based on specified parameters. Query parameters **dataModelName**, **dataObjectName** and **dataElementName** as well as **correlationProperties** transfered as request body are used as a query to find a matching data element instance.
     * @param dataModelNamespace Namespace of the data model a data object instance should belong to.
     * @param dataModelName Name of the data model a data element instance should belong to.
     * @param dataObjectName The name of the data object the instance should belong to.
     * @param dataElementName The name of the data element the instance should belong to.
     * @param correlationProperties An array of correlation properties associated with the searched data element instance.
     */
    public queryDataElementInstanceWithHttpInfo(dataModelNamespace: string, dataModelName: string, dataObjectName: string, dataElementName: string, correlationProperties: models.CorrelationPropertyArray, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataElementInstances';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataModelNamespace' is not null or undefined
        if (dataModelNamespace === null || dataModelNamespace === undefined) {
            throw new Error('Required parameter dataModelNamespace was null or undefined when calling queryDataElementInstance.');
        }
        // verify required parameter 'dataModelName' is not null or undefined
        if (dataModelName === null || dataModelName === undefined) {
            throw new Error('Required parameter dataModelName was null or undefined when calling queryDataElementInstance.');
        }
        // verify required parameter 'dataObjectName' is not null or undefined
        if (dataObjectName === null || dataObjectName === undefined) {
            throw new Error('Required parameter dataObjectName was null or undefined when calling queryDataElementInstance.');
        }
        // verify required parameter 'dataElementName' is not null or undefined
        if (dataElementName === null || dataElementName === undefined) {
            throw new Error('Required parameter dataElementName was null or undefined when calling queryDataElementInstance.');
        }
        // verify required parameter 'correlationProperties' is not null or undefined
        if (correlationProperties === null || correlationProperties === undefined) {
            throw new Error('Required parameter correlationProperties was null or undefined when calling queryDataElementInstance.');
        }
        if (dataModelNamespace !== undefined) {
            queryParameters.set('dataModelNamespace', <any>dataModelNamespace);
        }

        if (dataModelName !== undefined) {
            queryParameters.set('dataModelName', <any>dataModelName);
        }

        if (dataObjectName !== undefined) {
            queryParameters.set('dataObjectName', <any>dataObjectName);
        }

        if (dataElementName !== undefined) {
            queryParameters.set('dataElementName', <any>dataElementName);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: correlationProperties == null ? '' : JSON.stringify(correlationProperties), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
