/**
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DataDependencyGraphApi {

    protected basePath = 'https://localhost/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Creates and adds a new data dependency graph to the TraDE middleware
     * @param dataDependencyGraphData The name and creating entity of the data dependency graph that will be created.
     */
    public addDataDependencyGraph(dataDependencyGraphData: models.DataDependencyGraphData, extraHttpRequestParams?: any): Observable<models.DataDependencyGraphWithLinks> {
        return this.addDataDependencyGraphWithHttpInfo(dataDependencyGraphData, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Deletes a data dependency graph from the TraDE middleware.
     * @summary Deletes a data dependency graph.
     * @param graphId Id of the data dependency graph that needs to be fetched
     */
    public deleteDataDependencyGraph(graphId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteDataDependencyGraphWithHttpInfo(graphId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Provides the serialized graph model of the data dependency graph
     * @param graphId Id of the data dependency graph that needs to be fetched
     */
    public downloadGraphModel(graphId: string, extraHttpRequestParams?: any): Observable<string> {
        return this.downloadGraphModelWithHttpInfo(graphId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Find a data dependency graph by Id
     * @param graphId Id of the data dependency graph that needs to be fetched
     */
    public getDataDependencyGraphDirectly(graphId: string, extraHttpRequestParams?: any): Observable<models.DataDependencyGraphWithLinks> {
        return this.getDataDependencyGraphDirectlyWithHttpInfo(graphId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets all available `DataDependencyGraph` resources. Optional query parameter of **start** and **size** enable pagination of the collection of data dependency graph resources and param **targetNamespace**, **name** and **entity** filter result list by name, targetNamespace and entity.
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param targetNamespace Target namespace of data dependency graph to return
     * @param name Name of data dependency graph to return
     * @param entity Creating entity of data dependency graph to return
     */
    public getDataDependencyGraphs(start?: number, size?: number, targetNamespace?: string, name?: string, entity?: string, extraHttpRequestParams?: any): Observable<models.DataDependencyGraphArrayWithLinks> {
        return this.getDataDependencyGraphsWithHttpInfo(start, size, targetNamespace, name, entity, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Upload a serialized graph model to the TraDE middleware in order to make it available.
     * @param graphId Id of the data dependency graph that needs to be fetched
     * @param contentLength The size of the serialized graph model passed as header
     * @param graph The serialized graph model to upload.
     */
    public uploadGraphModel(graphId: string, contentLength: number, graph: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.uploadGraphModelWithHttpInfo(graphId, contentLength, graph, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Creates and adds a new data dependency graph to the TraDE middleware
     * 
     * @param dataDependencyGraphData The name and creating entity of the data dependency graph that will be created.
     */
    public addDataDependencyGraphWithHttpInfo(dataDependencyGraphData: models.DataDependencyGraphData, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataDependencyGraphs';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataDependencyGraphData' is not null or undefined
        if (dataDependencyGraphData === null || dataDependencyGraphData === undefined) {
            throw new Error('Required parameter dataDependencyGraphData was null or undefined when calling addDataDependencyGraph.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: dataDependencyGraphData == null ? '' : JSON.stringify(dataDependencyGraphData), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Deletes a data dependency graph.
     * Deletes a data dependency graph from the TraDE middleware.
     * @param graphId Id of the data dependency graph that needs to be fetched
     */
    public deleteDataDependencyGraphWithHttpInfo(graphId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataDependencyGraphs/${graphId}'
                    .replace('${' + 'graphId' + '}', String(graphId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'graphId' is not null or undefined
        if (graphId === null || graphId === undefined) {
            throw new Error('Required parameter graphId was null or undefined when calling deleteDataDependencyGraph.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Provides the serialized graph model of the data dependency graph
     * 
     * @param graphId Id of the data dependency graph that needs to be fetched
     */
    public downloadGraphModelWithHttpInfo(graphId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataDependencyGraphs/${graphId}/serialized-graph'
                    .replace('${' + 'graphId' + '}', String(graphId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'graphId' is not null or undefined
        if (graphId === null || graphId === undefined) {
            throw new Error('Required parameter graphId was null or undefined when calling downloadGraphModel.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/octet-stream'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find a data dependency graph by Id
     * 
     * @param graphId Id of the data dependency graph that needs to be fetched
     */
    public getDataDependencyGraphDirectlyWithHttpInfo(graphId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataDependencyGraphs/${graphId}'
                    .replace('${' + 'graphId' + '}', String(graphId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'graphId' is not null or undefined
        if (graphId === null || graphId === undefined) {
            throw new Error('Required parameter graphId was null or undefined when calling getDataDependencyGraphDirectly.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets all available &#x60;DataDependencyGraph&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data dependency graph resources and param **targetNamespace**, **name** and **entity** filter result list by name, targetNamespace and entity.
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param targetNamespace Target namespace of data dependency graph to return
     * @param name Name of data dependency graph to return
     * @param entity Creating entity of data dependency graph to return
     */
    public getDataDependencyGraphsWithHttpInfo(start?: number, size?: number, targetNamespace?: string, name?: string, entity?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataDependencyGraphs';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (targetNamespace !== undefined) {
            queryParameters.set('targetNamespace', <any>targetNamespace);
        }

        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }

        if (entity !== undefined) {
            queryParameters.set('entity', <any>entity);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Upload a serialized graph model to the TraDE middleware in order to make it available.
     * 
     * @param graphId Id of the data dependency graph that needs to be fetched
     * @param contentLength The size of the serialized graph model passed as header
     * @param graph The serialized graph model to upload.
     */
    public uploadGraphModelWithHttpInfo(graphId: string, contentLength: number, graph: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataDependencyGraphs/${graphId}/serialized-graph'
                    .replace('${' + 'graphId' + '}', String(graphId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'graphId' is not null or undefined
        if (graphId === null || graphId === undefined) {
            throw new Error('Required parameter graphId was null or undefined when calling uploadGraphModel.');
        }
        // verify required parameter 'contentLength' is not null or undefined
        if (contentLength === null || contentLength === undefined) {
            throw new Error('Required parameter contentLength was null or undefined when calling uploadGraphModel.');
        }
        // verify required parameter 'graph' is not null or undefined
        if (graph === null || graph === undefined) {
            throw new Error('Required parameter graph was null or undefined when calling uploadGraphModel.');
        }
        if (contentLength !== undefined && contentLength !== null) {
            headers.set('Content-Length', String(contentLength));
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/octet-stream'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: graph == null ? '' : JSON.stringify(graph), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
