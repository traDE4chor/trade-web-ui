/**
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DataDependencyGraphArrayWithLinks } from '../model/dataDependencyGraphArrayWithLinks';
import { DataDependencyGraphData } from '../model/dataDependencyGraphData';
import { DataDependencyGraphWithLinks } from '../model/dataDependencyGraphWithLinks';
import { InvalidInput } from '../model/invalidInput';
import { NotFound } from '../model/notFound';

import { TRADE_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DataDependencyGraphService {

    protected basePath = 'https://localhost/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(TRADE_BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates and adds a new data dependency graph to the TraDE middleware
     * 
     * @param dataDependencyGraphData The name and creating entity of the data dependency graph that will be created.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addDataDependencyGraph(dataDependencyGraphData: DataDependencyGraphData, observe?: 'body', reportProgress?: boolean): Observable<DataDependencyGraphWithLinks>;
    public addDataDependencyGraph(dataDependencyGraphData: DataDependencyGraphData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataDependencyGraphWithLinks>>;
    public addDataDependencyGraph(dataDependencyGraphData: DataDependencyGraphData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataDependencyGraphWithLinks>>;
    public addDataDependencyGraph(dataDependencyGraphData: DataDependencyGraphData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dataDependencyGraphData === null || dataDependencyGraphData === undefined) {
            throw new Error('Required parameter dataDependencyGraphData was null or undefined when calling addDataDependencyGraph.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<DataDependencyGraphWithLinks>(`${this.basePath}/dataDependencyGraphs`,
            dataDependencyGraphData,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a data dependency graph.
     * Deletes a data dependency graph from the TraDE middleware.
     * @param graphId Id of the data dependency graph that needs to be fetched
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDataDependencyGraph(graphId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDataDependencyGraph(graphId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDataDependencyGraph(graphId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDataDependencyGraph(graphId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (graphId === null || graphId === undefined) {
            throw new Error('Required parameter graphId was null or undefined when calling deleteDataDependencyGraph.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/dataDependencyGraphs/${encodeURIComponent(String(graphId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Provides the serialized graph model of the data dependency graph
     * 
     * @param graphId Id of the data dependency graph that needs to be fetched
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadGraphModel(graphId: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public downloadGraphModel(graphId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public downloadGraphModel(graphId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public downloadGraphModel(graphId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (graphId === null || graphId === undefined) {
            throw new Error('Required parameter graphId was null or undefined when calling downloadGraphModel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/dataDependencyGraphs/${encodeURIComponent(String(graphId))}/serialized-graph`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find a data dependency graph by Id
     * 
     * @param graphId Id of the data dependency graph that needs to be fetched
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDataDependencyGraphDirectly(graphId: string, observe?: 'body', reportProgress?: boolean): Observable<DataDependencyGraphWithLinks>;
    public getDataDependencyGraphDirectly(graphId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataDependencyGraphWithLinks>>;
    public getDataDependencyGraphDirectly(graphId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataDependencyGraphWithLinks>>;
    public getDataDependencyGraphDirectly(graphId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (graphId === null || graphId === undefined) {
            throw new Error('Required parameter graphId was null or undefined when calling getDataDependencyGraphDirectly.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<DataDependencyGraphWithLinks>(`${this.basePath}/dataDependencyGraphs/${encodeURIComponent(String(graphId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets all available &#x60;DataDependencyGraph&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data dependency graph resources and param **targetNamespace**, **name** and **entity** filter result list by name, targetNamespace and entity.
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param targetNamespace Target namespace of data dependency graph to return
     * @param name Name of data dependency graph to return
     * @param entity Creating entity of data dependency graph to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDataDependencyGraphs(start?: number, size?: number, targetNamespace?: string, name?: string, entity?: string, observe?: 'body', reportProgress?: boolean): Observable<DataDependencyGraphArrayWithLinks>;
    public getDataDependencyGraphs(start?: number, size?: number, targetNamespace?: string, name?: string, entity?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataDependencyGraphArrayWithLinks>>;
    public getDataDependencyGraphs(start?: number, size?: number, targetNamespace?: string, name?: string, entity?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataDependencyGraphArrayWithLinks>>;
    public getDataDependencyGraphs(start?: number, size?: number, targetNamespace?: string, name?: string, entity?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (start !== undefined) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (targetNamespace !== undefined) {
            queryParameters = queryParameters.set('targetNamespace', <any>targetNamespace);
        }
        if (name !== undefined) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (entity !== undefined) {
            queryParameters = queryParameters.set('entity', <any>entity);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<DataDependencyGraphArrayWithLinks>(`${this.basePath}/dataDependencyGraphs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload a serialized graph model to the TraDE middleware in order to make it available.
     * 
     * @param graphId Id of the data dependency graph that needs to be fetched
     * @param contentLength The size of the serialized graph model passed as header
     * @param graph The serialized graph model to upload.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadGraphModel(graphId: string, contentLength: number, graph: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uploadGraphModel(graphId: string, contentLength: number, graph: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uploadGraphModel(graphId: string, contentLength: number, graph: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uploadGraphModel(graphId: string, contentLength: number, graph: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (graphId === null || graphId === undefined) {
            throw new Error('Required parameter graphId was null or undefined when calling uploadGraphModel.');
        }
        if (contentLength === null || contentLength === undefined) {
            throw new Error('Required parameter contentLength was null or undefined when calling uploadGraphModel.');
        }
        if (graph === null || graph === undefined) {
            throw new Error('Required parameter graph was null or undefined when calling uploadGraphModel.');
        }

        let headers = this.defaultHeaders;
        if (contentLength !== undefined && contentLength !== null) {
            headers = headers.set('Content-Length', String(contentLength));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/octet-stream'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/dataDependencyGraphs/${encodeURIComponent(String(graphId))}/serialized-graph`,
            graph,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
