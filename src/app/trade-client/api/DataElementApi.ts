/**
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DataElementApi {

    protected basePath = 'https://localhost/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Add a new dataElement to the dataObject. If the dataObject belongs to a dataModel the create request will be rejected, since data models are immutable resources.
     * @param dataObjectId Id of the data object that needs to be fetched
     * @param dataElementData The name and creating entity of the data element that will be created.
     */
    public addDataElement(dataObjectId: string, dataElementData: models.DataElementData, extraHttpRequestParams?: any): Observable<models.DataElementWithLinks> {
        return this.addDataElementWithHttpInfo(dataObjectId, dataElementData, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Deletes a complete data element and its referenced instances from the TraDE middleware
     * @summary Deletes a data element. If the parent dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
     * @param dataElementId Id of the data element that needs to be deleted
     */
    public deleteDataElement(dataElementId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteDataElementWithHttpInfo(dataElementId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets all available `DataElement` resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element resources, param **name** filters result list by name and param **status** filters result list by status of the data elements.
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param name Name of data elements to return
     * @param status Status of data elements to return
     */
    public getAllDataElements(start?: number, size?: number, name?: string, status?: string, extraHttpRequestParams?: any): Observable<models.DataElementArrayWithLinks> {
        return this.getAllDataElementsWithHttpInfo(start, size, name, status, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Find a data element by Id
     * @param dataElementId Id of the data element that needs to be fetched
     */
    public getDataElementDirectly(dataElementId: string, extraHttpRequestParams?: any): Observable<models.DataElementWithLinks> {
        return this.getDataElementDirectlyWithHttpInfo(dataElementId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets all available `DataElement` resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element resources, param **name** filters result list by name and param **status** filters result list by status of the data elements.
     * @param dataObjectId Id of the data object that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param name Name of data elements to return
     * @param status Status of data elements to return
     */
    public getDataElements(dataObjectId: string, start?: number, size?: number, name?: string, status?: string, extraHttpRequestParams?: any): Observable<models.DataElementArrayWithLinks> {
        return this.getDataElementsWithHttpInfo(dataObjectId, start, size, name, status, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Update an existing data element
     * @summary Update an existing data element. If the parent dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
     * @param dataElementId Id of the data element that needs to be fetched
     * @param dataElement The updated data element resource. Only changes to the following fields are reflected **name**, **type** and **contentType**. All other changes are ignored since the corresponding fields of the resource are internally set by the server or are immutable.
     */
    public updateDataElement(dataElementId: string, dataElement: models.DataElement, extraHttpRequestParams?: any): Observable<models.DataElementWithLinks> {
        return this.updateDataElementWithHttpInfo(dataElementId, dataElement, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Add a new dataElement to the dataObject. If the dataObject belongs to a dataModel the create request will be rejected, since data models are immutable resources.
     * 
     * @param dataObjectId Id of the data object that needs to be fetched
     * @param dataElementData The name and creating entity of the data element that will be created.
     */
    public addDataElementWithHttpInfo(dataObjectId: string, dataElementData: models.DataElementData, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjects/${dataObjectId}/dataElements'
                    .replace('${' + 'dataObjectId' + '}', String(dataObjectId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataObjectId' is not null or undefined
        if (dataObjectId === null || dataObjectId === undefined) {
            throw new Error('Required parameter dataObjectId was null or undefined when calling addDataElement.');
        }
        // verify required parameter 'dataElementData' is not null or undefined
        if (dataElementData === null || dataElementData === undefined) {
            throw new Error('Required parameter dataElementData was null or undefined when calling addDataElement.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: dataElementData == null ? '' : JSON.stringify(dataElementData), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Deletes a data element. If the parent dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
     * Deletes a complete data element and its referenced instances from the TraDE middleware
     * @param dataElementId Id of the data element that needs to be deleted
     */
    public deleteDataElementWithHttpInfo(dataElementId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataElements/${dataElementId}'
                    .replace('${' + 'dataElementId' + '}', String(dataElementId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataElementId' is not null or undefined
        if (dataElementId === null || dataElementId === undefined) {
            throw new Error('Required parameter dataElementId was null or undefined when calling deleteDataElement.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets all available &#x60;DataElement&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element resources, param **name** filters result list by name and param **status** filters result list by status of the data elements.
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param name Name of data elements to return
     * @param status Status of data elements to return
     */
    public getAllDataElementsWithHttpInfo(start?: number, size?: number, name?: string, status?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataElements';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }

        if (status !== undefined) {
            queryParameters.set('status', <any>status);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find a data element by Id
     * 
     * @param dataElementId Id of the data element that needs to be fetched
     */
    public getDataElementDirectlyWithHttpInfo(dataElementId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataElements/${dataElementId}'
                    .replace('${' + 'dataElementId' + '}', String(dataElementId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataElementId' is not null or undefined
        if (dataElementId === null || dataElementId === undefined) {
            throw new Error('Required parameter dataElementId was null or undefined when calling getDataElementDirectly.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets all available &#x60;DataElement&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element resources, param **name** filters result list by name and param **status** filters result list by status of the data elements.
     * @param dataObjectId Id of the data object that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param name Name of data elements to return
     * @param status Status of data elements to return
     */
    public getDataElementsWithHttpInfo(dataObjectId: string, start?: number, size?: number, name?: string, status?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjects/${dataObjectId}/dataElements'
                    .replace('${' + 'dataObjectId' + '}', String(dataObjectId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataObjectId' is not null or undefined
        if (dataObjectId === null || dataObjectId === undefined) {
            throw new Error('Required parameter dataObjectId was null or undefined when calling getDataElements.');
        }
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }

        if (status !== undefined) {
            queryParameters.set('status', <any>status);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update an existing data element. If the parent dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
     * Update an existing data element
     * @param dataElementId Id of the data element that needs to be fetched
     * @param dataElement The updated data element resource. Only changes to the following fields are reflected **name**, **type** and **contentType**. All other changes are ignored since the corresponding fields of the resource are internally set by the server or are immutable.
     */
    public updateDataElementWithHttpInfo(dataElementId: string, dataElement: models.DataElement, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataElements/${dataElementId}'
                    .replace('${' + 'dataElementId' + '}', String(dataElementId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataElementId' is not null or undefined
        if (dataElementId === null || dataElementId === undefined) {
            throw new Error('Required parameter dataElementId was null or undefined when calling updateDataElement.');
        }
        // verify required parameter 'dataElement' is not null or undefined
        if (dataElement === null || dataElement === undefined) {
            throw new Error('Required parameter dataElement was null or undefined when calling updateDataElement.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: dataElement == null ? '' : JSON.stringify(dataElement), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
