/**
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CorrelationPropertyArray } from '../model/correlationPropertyArray';
import { DataObjectInstanceArrayWithLinks } from '../model/dataObjectInstanceArrayWithLinks';
import { DataObjectInstanceData } from '../model/dataObjectInstanceData';
import { DataObjectInstanceWithLinks } from '../model/dataObjectInstanceWithLinks';
import { InvalidInput } from '../model/invalidInput';
import { NotFound } from '../model/notFound';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DataObjectInstanceService {

    protected basePath = 'https://localhost/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates a data object instance for the specified dataObject. In addition a corresponding data element instance for all data elements of the specified dataObject are created.
     * 
     * @param dataObjectId Id of the data object that needs to be fetched
     * @param dataObjectInstanceData The creating entity and correlation properties of the data object instance that will be created.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addDataObjectInstance(dataObjectId: string, dataObjectInstanceData: DataObjectInstanceData, observe?: 'body', reportProgress?: boolean): Observable<DataObjectInstanceWithLinks>;
    public addDataObjectInstance(dataObjectId: string, dataObjectInstanceData: DataObjectInstanceData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataObjectInstanceWithLinks>>;
    public addDataObjectInstance(dataObjectId: string, dataObjectInstanceData: DataObjectInstanceData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataObjectInstanceWithLinks>>;
    public addDataObjectInstance(dataObjectId: string, dataObjectInstanceData: DataObjectInstanceData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dataObjectId === null || dataObjectId === undefined) {
            throw new Error('Required parameter dataObjectId was null or undefined when calling addDataObjectInstance.');
        }
        if (dataObjectInstanceData === null || dataObjectInstanceData === undefined) {
            throw new Error('Required parameter dataObjectInstanceData was null or undefined when calling addDataObjectInstance.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<DataObjectInstanceWithLinks>(`${this.basePath}/dataObjects/${encodeURIComponent(String(dataObjectId))}/instances`,
            dataObjectInstanceData,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a data object instance
     * Deletes a complete data object instance and its referenced data element instances from the TraDE middleware
     * @param instanceId Id of the data object instance that needs to be fetched
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDataObjectInstance(instanceId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDataObjectInstance(instanceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDataObjectInstance(instanceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDataObjectInstance(instanceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (instanceId === null || instanceId === undefined) {
            throw new Error('Required parameter instanceId was null or undefined when calling deleteDataObjectInstance.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/dataObjectInstances/${encodeURIComponent(String(instanceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find a data object instance by Id
     * 
     * @param instanceId Id of the data object instance that needs to be fetched
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDataObjectInstance(instanceId: string, observe?: 'body', reportProgress?: boolean): Observable<DataObjectInstanceWithLinks>;
    public getDataObjectInstance(instanceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataObjectInstanceWithLinks>>;
    public getDataObjectInstance(instanceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataObjectInstanceWithLinks>>;
    public getDataObjectInstance(instanceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (instanceId === null || instanceId === undefined) {
            throw new Error('Required parameter instanceId was null or undefined when calling getDataObjectInstance.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<DataObjectInstanceWithLinks>(`${this.basePath}/dataObjectInstances/${encodeURIComponent(String(instanceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets all available &#x60;DataObjectInstance&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data object instance resources and param **status** filters result list by status of the data object instances.
     * @param dataObjectId Id of the data object that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param status Status of data object instances to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDataObjectInstances(dataObjectId: string, start?: number, size?: number, status?: string, observe?: 'body', reportProgress?: boolean): Observable<DataObjectInstanceArrayWithLinks>;
    public getDataObjectInstances(dataObjectId: string, start?: number, size?: number, status?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataObjectInstanceArrayWithLinks>>;
    public getDataObjectInstances(dataObjectId: string, start?: number, size?: number, status?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataObjectInstanceArrayWithLinks>>;
    public getDataObjectInstances(dataObjectId: string, start?: number, size?: number, status?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dataObjectId === null || dataObjectId === undefined) {
            throw new Error('Required parameter dataObjectId was null or undefined when calling getDataObjectInstances.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (start !== undefined) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (status !== undefined) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<DataObjectInstanceArrayWithLinks>(`${this.basePath}/dataObjects/${encodeURIComponent(String(dataObjectId))}/instances`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Query an available &#x60;DataObjectInstance&#x60; resource based on specified parameters. Query parameters **dataModelName** and **dataObjectName** as well as **correlationProperties** transfered as request body are used as a query to find a matching data object instance.
     * @param dataModelNamespace Namespace of the data model a data object instance should belong to.
     * @param dataModelName Name of the data model a data object instance should belong to.
     * @param dataObjectName The name of the data object the instance should belong to.
     * @param correlationProperties An array of correlation properties associated with the searched data object instance.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryDataObjectInstance(dataModelNamespace: string, dataModelName: string, dataObjectName: string, correlationProperties: CorrelationPropertyArray, observe?: 'body', reportProgress?: boolean): Observable<DataObjectInstanceWithLinks>;
    public queryDataObjectInstance(dataModelNamespace: string, dataModelName: string, dataObjectName: string, correlationProperties: CorrelationPropertyArray, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataObjectInstanceWithLinks>>;
    public queryDataObjectInstance(dataModelNamespace: string, dataModelName: string, dataObjectName: string, correlationProperties: CorrelationPropertyArray, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataObjectInstanceWithLinks>>;
    public queryDataObjectInstance(dataModelNamespace: string, dataModelName: string, dataObjectName: string, correlationProperties: CorrelationPropertyArray, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (dataModelNamespace === null || dataModelNamespace === undefined) {
            throw new Error('Required parameter dataModelNamespace was null or undefined when calling queryDataObjectInstance.');
        }
        if (dataModelName === null || dataModelName === undefined) {
            throw new Error('Required parameter dataModelName was null or undefined when calling queryDataObjectInstance.');
        }
        if (dataObjectName === null || dataObjectName === undefined) {
            throw new Error('Required parameter dataObjectName was null or undefined when calling queryDataObjectInstance.');
        }
        if (correlationProperties === null || correlationProperties === undefined) {
            throw new Error('Required parameter correlationProperties was null or undefined when calling queryDataObjectInstance.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (dataModelNamespace !== undefined) {
            queryParameters = queryParameters.set('dataModelNamespace', <any>dataModelNamespace);
        }
        if (dataModelName !== undefined) {
            queryParameters = queryParameters.set('dataModelName', <any>dataModelName);
        }
        if (dataObjectName !== undefined) {
            queryParameters = queryParameters.set('dataObjectName', <any>dataObjectName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<DataObjectInstanceWithLinks>(`${this.basePath}/dataObjectInstances`,
            correlationProperties,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
