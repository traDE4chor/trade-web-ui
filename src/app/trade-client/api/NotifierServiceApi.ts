/**
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class NotifierServiceApi {

    protected basePath = 'https://localhost/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Find a notifier service by Id
     * @param notifierServiceId Id of the notifier service that needs to be fetched
     */
    public getNotifierServiceDirectly(notifierServiceId: string, extraHttpRequestParams?: any): Observable<models.NotifierService> {
        return this.getNotifierServiceDirectlyWithHttpInfo(notifierServiceId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Get the associated notifier service of this notification
     * @param notificationId Id of the notification for which the notifier service should to be fetched
     */
    public getNotifierServiceOfNotification(notificationId: string, extraHttpRequestParams?: any): Observable<models.NotifierService> {
        return this.getNotifierServiceOfNotificationWithHttpInfo(notificationId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets all available `NotifierService` resources. Optional query parameter of **start** and **size** enable pagination of the collection of notifier service resources.
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     */
    public getNotifierServices(start?: number, size?: number, extraHttpRequestParams?: any): Observable<models.NotifierServiceArrayWithLinks> {
        return this.getNotifierServicesWithHttpInfo(start, size, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Find a notifier service by Id
     * 
     * @param notifierServiceId Id of the notifier service that needs to be fetched
     */
    public getNotifierServiceDirectlyWithHttpInfo(notifierServiceId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/notifierServices/${notifierServiceId}'
                    .replace('${' + 'notifierServiceId' + '}', String(notifierServiceId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'notifierServiceId' is not null or undefined
        if (notifierServiceId === null || notifierServiceId === undefined) {
            throw new Error('Required parameter notifierServiceId was null or undefined when calling getNotifierServiceDirectly.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get the associated notifier service of this notification
     * 
     * @param notificationId Id of the notification for which the notifier service should to be fetched
     */
    public getNotifierServiceOfNotificationWithHttpInfo(notificationId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/notifications/${notificationId}/notifierService'
                    .replace('${' + 'notificationId' + '}', String(notificationId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'notificationId' is not null or undefined
        if (notificationId === null || notificationId === undefined) {
            throw new Error('Required parameter notificationId was null or undefined when calling getNotifierServiceOfNotification.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets all available &#x60;NotifierService&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of notifier service resources.
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     */
    public getNotifierServicesWithHttpInfo(start?: number, size?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/notifierServices';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
