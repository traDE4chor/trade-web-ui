/**
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DataObjectInstanceApi {

    protected basePath = 'https://localhost/api';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Creates a data object instance for the specified dataObject. In addition a corresponding data element instance for all data elements of the specified dataObject are created.
     * @param dataObjectId Id of the data object that needs to be fetched
     * @param dataObjectInstanceData The creating entity and correlation properties of the data object instance that will be created.
     */
    public addDataObjectInstance(dataObjectId: string, dataObjectInstanceData: models.DataObjectInstanceData, extraHttpRequestParams?: any): Observable<models.DataObjectInstanceWithLinks> {
        return this.addDataObjectInstanceWithHttpInfo(dataObjectId, dataObjectInstanceData, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Deletes a complete data object instance and its referenced data element instances from the TraDE middleware
     * @summary Deletes a data object instance
     * @param instanceId Id of the data object instance that needs to be fetched
     */
    public deleteDataObjectInstance(instanceId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteDataObjectInstanceWithHttpInfo(instanceId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Find a data object instance by Id
     * @param instanceId Id of the data object instance that needs to be fetched
     */
    public getDataObjectInstance(instanceId: string, extraHttpRequestParams?: any): Observable<models.DataObjectInstanceWithLinks> {
        return this.getDataObjectInstanceWithHttpInfo(instanceId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets all available `DataObjectInstance` resources. Optional query parameter of **start** and **size** enable pagination of the collection of data object instance resources and param **status** filters result list by status of the data object instances.
     * @param dataObjectId Id of the data object that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param status Status of data object instances to return
     */
    public getDataObjectInstances(dataObjectId: string, start?: number, size?: number, status?: string, extraHttpRequestParams?: any): Observable<models.DataObjectInstanceArrayWithLinks> {
        return this.getDataObjectInstancesWithHttpInfo(dataObjectId, start, size, status, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Query an available `DataObjectInstance` resource based on specified parameters. Query parameters **dataModelName** and **dataObjectName** as well as **correlationProperties** transfered as request body are used as a query to find a matching data object instance.
     * @param dataModelNamespace Namespace of the data model a data object instance should belong to.
     * @param dataModelName Name of the data model a data object instance should belong to.
     * @param dataObjectName The name of the data object the instance should belong to.
     * @param correlationProperties An array of correlation properties associated with the searched data object instance.
     */
    public queryDataObjectInstance(dataModelNamespace: string, dataModelName: string, dataObjectName: string, correlationProperties: models.CorrelationPropertyArray, extraHttpRequestParams?: any): Observable<models.DataObjectInstanceWithLinks> {
        return this.queryDataObjectInstanceWithHttpInfo(dataModelNamespace, dataModelName, dataObjectName, correlationProperties, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Creates a data object instance for the specified dataObject. In addition a corresponding data element instance for all data elements of the specified dataObject are created.
     * 
     * @param dataObjectId Id of the data object that needs to be fetched
     * @param dataObjectInstanceData The creating entity and correlation properties of the data object instance that will be created.
     */
    public addDataObjectInstanceWithHttpInfo(dataObjectId: string, dataObjectInstanceData: models.DataObjectInstanceData, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjects/${dataObjectId}/instances'
                    .replace('${' + 'dataObjectId' + '}', String(dataObjectId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataObjectId' is not null or undefined
        if (dataObjectId === null || dataObjectId === undefined) {
            throw new Error('Required parameter dataObjectId was null or undefined when calling addDataObjectInstance.');
        }
        // verify required parameter 'dataObjectInstanceData' is not null or undefined
        if (dataObjectInstanceData === null || dataObjectInstanceData === undefined) {
            throw new Error('Required parameter dataObjectInstanceData was null or undefined when calling addDataObjectInstance.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: dataObjectInstanceData == null ? '' : JSON.stringify(dataObjectInstanceData), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Deletes a data object instance
     * Deletes a complete data object instance and its referenced data element instances from the TraDE middleware
     * @param instanceId Id of the data object instance that needs to be fetched
     */
    public deleteDataObjectInstanceWithHttpInfo(instanceId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjectInstances/${instanceId}'
                    .replace('${' + 'instanceId' + '}', String(instanceId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'instanceId' is not null or undefined
        if (instanceId === null || instanceId === undefined) {
            throw new Error('Required parameter instanceId was null or undefined when calling deleteDataObjectInstance.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find a data object instance by Id
     * 
     * @param instanceId Id of the data object instance that needs to be fetched
     */
    public getDataObjectInstanceWithHttpInfo(instanceId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjectInstances/${instanceId}'
                    .replace('${' + 'instanceId' + '}', String(instanceId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'instanceId' is not null or undefined
        if (instanceId === null || instanceId === undefined) {
            throw new Error('Required parameter instanceId was null or undefined when calling getDataObjectInstance.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets all available &#x60;DataObjectInstance&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data object instance resources and param **status** filters result list by status of the data object instances.
     * @param dataObjectId Id of the data object that needs to be fetched
     * @param start Start index of returned collection of resources for pagination.
     * @param size Size of the returned sub-collection of resources for pagination.
     * @param status Status of data object instances to return
     */
    public getDataObjectInstancesWithHttpInfo(dataObjectId: string, start?: number, size?: number, status?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjects/${dataObjectId}/instances'
                    .replace('${' + 'dataObjectId' + '}', String(dataObjectId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataObjectId' is not null or undefined
        if (dataObjectId === null || dataObjectId === undefined) {
            throw new Error('Required parameter dataObjectId was null or undefined when calling getDataObjectInstances.');
        }
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (size !== undefined) {
            queryParameters.set('size', <any>size);
        }

        if (status !== undefined) {
            queryParameters.set('status', <any>status);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Query an available &#x60;DataObjectInstance&#x60; resource based on specified parameters. Query parameters **dataModelName** and **dataObjectName** as well as **correlationProperties** transfered as request body are used as a query to find a matching data object instance.
     * @param dataModelNamespace Namespace of the data model a data object instance should belong to.
     * @param dataModelName Name of the data model a data object instance should belong to.
     * @param dataObjectName The name of the data object the instance should belong to.
     * @param correlationProperties An array of correlation properties associated with the searched data object instance.
     */
    public queryDataObjectInstanceWithHttpInfo(dataModelNamespace: string, dataModelName: string, dataObjectName: string, correlationProperties: models.CorrelationPropertyArray, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/dataObjectInstances';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'dataModelNamespace' is not null or undefined
        if (dataModelNamespace === null || dataModelNamespace === undefined) {
            throw new Error('Required parameter dataModelNamespace was null or undefined when calling queryDataObjectInstance.');
        }
        // verify required parameter 'dataModelName' is not null or undefined
        if (dataModelName === null || dataModelName === undefined) {
            throw new Error('Required parameter dataModelName was null or undefined when calling queryDataObjectInstance.');
        }
        // verify required parameter 'dataObjectName' is not null or undefined
        if (dataObjectName === null || dataObjectName === undefined) {
            throw new Error('Required parameter dataObjectName was null or undefined when calling queryDataObjectInstance.');
        }
        // verify required parameter 'correlationProperties' is not null or undefined
        if (correlationProperties === null || correlationProperties === undefined) {
            throw new Error('Required parameter correlationProperties was null or undefined when calling queryDataObjectInstance.');
        }
        if (dataModelNamespace !== undefined) {
            queryParameters.set('dataModelNamespace', <any>dataModelNamespace);
        }

        if (dataModelName !== undefined) {
            queryParameters.set('dataModelName', <any>dataModelName);
        }

        if (dataObjectName !== undefined) {
            queryParameters.set('dataObjectName', <any>dataObjectName);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: correlationProperties == null ? '' : JSON.stringify(correlationProperties), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
